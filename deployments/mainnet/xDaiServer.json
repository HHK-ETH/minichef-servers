{
  "address": "0xBbD10280DD13de418f666648D2488e4059F56d81",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_minichef",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newBridgeAdapter",
          "type": "address"
        }
      ],
      "name": "BridgeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minichef",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BridgedSushi",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "Harvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "WithdrawnDummyToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawnSushi",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeAdapter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestAndBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterchefV1",
      "outputs": [
        {
          "internalType": "contract IMasterChefV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minichef",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushi",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newBridgeAdapter",
          "type": "address"
        }
      ],
      "name": "updateBridgeAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdrawDummyToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdrawSushiToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x431480e52e1856deab65793ebb0f9e089891df49a6f989243a395242e0dcd8c0",
  "receipt": {
    "to": null,
    "from": "0xCc159BCb6a466DA442D254Ad934125f05DAB66b5",
    "contractAddress": "0xBbD10280DD13de418f666648D2488e4059F56d81",
    "transactionIndex": 42,
    "gasUsed": "1176969",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000002000000000000004000000000000000000000001000000000000000000000000000000000000020000000020000000000c00000000000000000000000000000000400000000000000000000000000000000000000000000000000000100000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xdf4b91a5411f9766c459cf1da5755b0a3e2ced5a02207f1bc366d60714a6ad22",
    "transactionHash": "0x431480e52e1856deab65793ebb0f9e089891df49a6f989243a395242e0dcd8c0",
    "logs": [
      {
        "transactionIndex": 42,
        "blockNumber": 14058977,
        "transactionHash": "0x431480e52e1856deab65793ebb0f9e089891df49a6f989243a395242e0dcd8c0",
        "address": "0xBbD10280DD13de418f666648D2488e4059F56d81",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cc159bcb6a466da442d254ad934125f05dab66b5"
        ],
        "data": "0x",
        "logIndex": 68,
        "blockHash": "0xdf4b91a5411f9766c459cf1da5755b0a3e2ced5a02207f1bc366d60714a6ad22"
      }
    ],
    "blockNumber": 14058977,
    "cumulativeGasUsed": "5554598",
    "status": 1,
    "byzantium": true
  },
  "args": [
    346,
    "0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3"
  ],
  "solcInputHash": "b6b96639bb7925217c746581f4d9ba5e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_minichef\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBridgeAdapter\",\"type\":\"address\"}],\"name\":\"BridgeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minichef\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgedSushi\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"WithdrawnDummyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnSushi\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeAdapter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAndBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterchefV1\",\"outputs\":[{\"internalType\":\"contract IMasterChefV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minichef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBridgeAdapter\",\"type\":\"address\"}],\"name\":\"updateBridgeAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawDummyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawSushiToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/implementations/xDaiServer.sol\":\"xDaiServer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BaseServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMasterChefV1 {\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n}\\n\\ninterface IBridgeAdapter {\\n    function bridge() external;\\n}\\n\\nabstract contract BaseServer is Ownable {\\n    IMasterChefV1 public constant masterchefV1 =\\n        IMasterChefV1(0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd);\\n    IERC20 public constant sushi =\\n        IERC20(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2);\\n\\n    uint256 public immutable pid;\\n\\n    address public immutable minichef;\\n\\n    address public bridgeAdapter;\\n\\n    event Harvested(uint256 indexed pid);\\n    event Withdrawn(uint256 indexed pid, uint256 indexed amount);\\n    event Deposited(uint256 indexed pid, uint256 indexed amount);\\n    event WithdrawnSushi(uint256 indexed pid, uint256 indexed amount);\\n    event WithdrawnDummyToken(uint256 indexed pid);\\n    event BridgeUpdated(address indexed newBridgeAdapter);\\n\\n    constructor(uint256 _pid, address _minichef) {\\n        pid = _pid;\\n        minichef = _minichef;\\n        bridgeAdapter = address(this);\\n    }\\n\\n    function harvestAndBridge() public {\\n        masterchefV1.withdraw(pid, 0);\\n        bridge();\\n        emit Harvested(pid);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        masterchefV1.withdraw(pid, 1);\\n        emit Withdrawn(pid, 1);\\n    }\\n\\n    function deposit(address token) public onlyOwner {\\n        IERC20(token).approve(address(masterchefV1), 1);\\n        masterchefV1.deposit(pid, 1);\\n        emit Deposited(pid, 1);\\n    }\\n\\n    function withdrawSushiToken(address recipient) public onlyOwner {\\n        uint256 sushiBalance = sushi.balanceOf(address(this));\\n        sushi.transfer(recipient, sushiBalance);\\n        emit WithdrawnSushi(pid, sushiBalance);\\n    }\\n\\n    function withdrawDummyToken(address token, address recipient)\\n        public\\n        onlyOwner\\n    {\\n        IERC20(token).transfer(recipient, 1);\\n        emit WithdrawnDummyToken(pid);\\n    }\\n\\n    function updateBridgeAdapter(address newBridgeAdapter) public onlyOwner {\\n        require(newBridgeAdapter != address(0), \\\"zero address\\\");\\n        bridgeAdapter = newBridgeAdapter;\\n        emit BridgeUpdated(newBridgeAdapter);\\n    }\\n\\n    function bridge() public {\\n        if (bridgeAdapter == address(this)) {\\n            _bridge();\\n        } else {\\n            uint256 sushiBalance = sushi.balanceOf(address(this));\\n            sushi.transfer(bridgeAdapter, sushiBalance);\\n            IBridgeAdapter(bridgeAdapter).bridge();\\n        }\\n    }\\n\\n    function _bridge() internal virtual;\\n}\\n\",\"keccak256\":\"0x0ec4b3fa1e487d0beb4f3f7f2c2af620b6956b4d6e085ceef959e9ed1650e45f\",\"license\":\"MIT\"},\"contracts/implementations/xDaiServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../BaseServer.sol\\\";\\n\\ninterface IxDaiBridge {\\n    function relayTokens(\\n        address token,\\n        address _receiver,\\n        uint256 _value\\n    ) external;\\n}\\n\\ncontract xDaiServer is BaseServer {\\n    address public constant bridgeAddr =\\n        0x88ad09518695c6c3712AC10a214bE5109a655671;\\n\\n    event BridgedSushi(address indexed minichef, uint256 indexed amount);\\n\\n    constructor(uint256 _pid, address _minichef) BaseServer(_pid, _minichef) {}\\n\\n    function _bridge() internal override {\\n        uint256 sushiBalance = sushi.balanceOf(address(this));\\n\\n        sushi.approve(bridgeAddr, sushiBalance);\\n        IxDaiBridge(bridgeAddr).relayTokens(\\n            address(sushi),\\n            minichef,\\n            sushiBalance\\n        );\\n        emit BridgedSushi(minichef, sushiBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x1e74af7e4855eb501896560913f9cb23af81b4ab6886ef3313abc4e41f45a162\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063b7d87f7311610097578063e78cea9211610066578063e78cea9214610238578063f106845414610240578063f2fde38b14610275578063f340fa011461028857600080fd5b8063b7d87f73146101e2578063be7dc09b146101f5578063ca5a79ea14610215578063d24a89d51461023057600080fd5b806387fcfb97116100d357806387fcfb971461016f5780638da5cb5b1461019657806391874ef7146101b4578063b62f5765146101cf57600080fd5b80630a087903146101055780633ccfd60b1461014a5780635e9ec2a414610154578063715018a614610167575b600080fd5b610120736b3595068778dd592e39a122f4f5a5cf09c90fe281565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61015261029b565b005b6101526101623660046112d7565b610415565b610152610582565b6101207f000000000000000000000000000000000000000000000000000000000000000081565b60005473ffffffffffffffffffffffffffffffffffffffff16610120565b6101207388ad09518695c6c3712ac10a214be5109a65567181565b6101526101dd3660046112f9565b61060f565b6101526101f03660046112d7565b610779565b6001546101209073ffffffffffffffffffffffffffffffffffffffff1681565b61012073c2edad668740f1aa35e4d8f227fb8e17dca888cd81565b610152610989565b610152610a82565b6102677f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610141565b6101526102833660046112d7565b610c71565b6101526102963660046112d7565b610da1565b60005473ffffffffffffffffffffffffffffffffffffffff163314610321576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6040517f441a3e700000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201526001602482015273c2edad668740f1aa35e4d8f227fb8e17dca888cd9063441a3e7090604401600060405180830381600087803b1580156103ad57600080fd5b505af11580156103c1573d6000803e3d6000fd5b5050604051600192507f000000000000000000000000000000000000000000000000000000000000000091507f0c875c8d391179c5cf7ad8303d268efd50b8beb78b671f85cd54bfb91eb8ef4090600090a3565b60005473ffffffffffffffffffffffffffffffffffffffff163314610496576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610318565b73ffffffffffffffffffffffffffffffffffffffff8116610513576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f7a65726f206164647265737300000000000000000000000000000000000000006044820152606401610318565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fe1694c0b21fdceff6411daed547c7463c2341b9695387bc82595b5b9b1851d4a90600090a250565b60005473ffffffffffffffffffffffffffffffffffffffff163314610603576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610318565b61060d6000610fc3565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610690576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610318565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526001602483015283169063a9059cbb906044016020604051808303816000875af1158015610705573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610729919061132c565b506040517f0000000000000000000000000000000000000000000000000000000000000000907fba72a1c6fb7c9e7f35c71c2c716849c2ccd659d35f4fdc3449b7240130da52d590600090a25050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610318565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600090736b3595068778dd592e39a122f4f5a5cf09c90fe2906370a0823190602401602060405180830381865afa158015610865573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610889919061134e565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260248101829052909150736b3595068778dd592e39a122f4f5a5cf09c90fe29063a9059cbb906044016020604051808303816000875af1158015610913573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610937919061132c565b5060405181907f0000000000000000000000000000000000000000000000000000000000000000907f8b39ec9eff477fd9d48c21ccd568bc1b6579e08559a161a7679819240975533e90600090a35050565b6040517f441a3e700000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201526000602482015273c2edad668740f1aa35e4d8f227fb8e17dca888cd9063441a3e7090604401600060405180830381600087803b158015610a1557600080fd5b505af1158015610a29573d6000803e3d6000fd5b50505050610a35610a82565b6040517f0000000000000000000000000000000000000000000000000000000000000000907f8e55ccfc9778ff8eba1646d765cf1982537ce0f9257054a17b48aad74525018390600090a2565b60015473ffffffffffffffffffffffffffffffffffffffff16301415610aaa5761060d611038565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600090736b3595068778dd592e39a122f4f5a5cf09c90fe2906370a0823190602401602060405180830381865afa158015610b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b39919061134e565b6001546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116600482015260248101829052909150736b3595068778dd592e39a122f4f5a5cf09c90fe29063a9059cbb906044016020604051808303816000875af1158015610bc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610beb919061132c565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e78cea926040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c5657600080fd5b505af1158015610c6a573d6000803e3d6000fd5b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610cf2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610318565b73ffffffffffffffffffffffffffffffffffffffff8116610d95576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610318565b610d9e81610fc3565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610318565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273c2edad668740f1aa35e4d8f227fb8e17dca888cd60048201526001602482015273ffffffffffffffffffffffffffffffffffffffff82169063095ea7b3906044016020604051808303816000875af1158015610ea9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ecd919061132c565b506040517fe2bbb1580000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201526001602482015273c2edad668740f1aa35e4d8f227fb8e17dca888cd9063e2bbb15890604401600060405180830381600087803b158015610f5a57600080fd5b505af1158015610f6e573d6000803e3d6000fd5b5050604051600192507f000000000000000000000000000000000000000000000000000000000000000091507f06da3309189fa49284f335d2c2bcb4cb0b8ad2a59ad92a9bdebeeb8f1ceba51190600090a350565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600090736b3595068778dd592e39a122f4f5a5cf09c90fe2906370a0823190602401602060405180830381865afa1580156110a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c7919061134e565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081527388ad09518695c6c3712ac10a214be5109a655671600482015260248101829052909150736b3595068778dd592e39a122f4f5a5cf09c90fe29063095ea7b3906044016020604051808303816000875af115801561114f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611173919061132c565b506040517fad58bdd1000000000000000000000000000000000000000000000000000000008152736b3595068778dd592e39a122f4f5a5cf09c90fe2600482015273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166024820152604481018290527388ad09518695c6c3712ac10a214be5109a6556719063ad58bdd190606401600060405180830381600087803b15801561123057600080fd5b505af1158015611244573d6000803e3d6000fd5b505060405183925073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691507f9d48f6ecbf6b1efdebdb866a0442bae03dfdfc3ee5d20cc9f641799ce66c83a290600090a350565b803573ffffffffffffffffffffffffffffffffffffffff811681146112d257600080fd5b919050565b6000602082840312156112e957600080fd5b6112f2826112ae565b9392505050565b6000806040838503121561130c57600080fd5b611315836112ae565b9150611323602084016112ae565b90509250929050565b60006020828403121561133e57600080fd5b815180151581146112f257600080fd5b60006020828403121561136057600080fd5b505191905056fea264697066735822122092cd88e5b9b412a0995bb8d1af42356872569d8d81fe2fa45f00e7dd4b96795e64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/implementations/xDaiServer.sol:xDaiServer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 818,
        "contract": "contracts/implementations/xDaiServer.sol:xDaiServer",
        "label": "bridgeAdapter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}