{
  "address": "0x9aac9048fC8139667D6a2597B902865bfdc225d3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_minichef",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minichef",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BridgedSushi",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestAndBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterchefV1",
      "outputs": [
        {
          "internalType": "contract IMasterChefV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minichef",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "polygonErcBridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushi",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x17161931dd6f57a7599c3fd1e8978505c7ef04768dca526e291d948b63b65374",
  "receipt": {
    "to": null,
    "from": "0xCc159BCb6a466DA442D254Ad934125f05DAB66b5",
    "contractAddress": "0x9aac9048fC8139667D6a2597B902865bfdc225d3",
    "transactionIndex": 193,
    "gasUsed": "648835",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000001000000000000000000000000000000800000020000000000000000000c00000000000000000000000000000000400000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000020000000000000000000000000000000000000008000000000000000000000000000",
    "blockHash": "0xf2fcc18f73fda2029e3c638befaaa66ddff7355c039c1e4f1e4a947ef95b20b2",
    "transactionHash": "0x17161931dd6f57a7599c3fd1e8978505c7ef04768dca526e291d948b63b65374",
    "logs": [
      {
        "transactionIndex": 193,
        "blockNumber": 13932472,
        "transactionHash": "0x17161931dd6f57a7599c3fd1e8978505c7ef04768dca526e291d948b63b65374",
        "address": "0x9aac9048fC8139667D6a2597B902865bfdc225d3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cc159bcb6a466da442d254ad934125f05dab66b5"
        ],
        "data": "0x",
        "logIndex": 200,
        "blockHash": "0xf2fcc18f73fda2029e3c638befaaa66ddff7355c039c1e4f1e4a947ef95b20b2"
      }
    ],
    "blockNumber": 13932472,
    "cumulativeGasUsed": "10400554",
    "status": 1,
    "byzantium": true
  },
  "args": [
    344,
    "0x0769fd68dFb93167989C6f7254cd0D766Fb2841F"
  ],
  "solcInputHash": "96f1193930a97b784f8d9662aa21fea2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_minichef\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minichef\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgedSushi\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAndBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterchefV1\",\"outputs\":[{\"internalType\":\"contract IMasterChefV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minichef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polygonErcBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/implementations/PolygonServer.sol\":\"PolygonServer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BaseServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IMasterChefV1 {\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n}\\n\\nabstract contract BaseServer is Ownable {\\n  IMasterChefV1 public constant masterchefV1 = IMasterChefV1(0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd);\\n  IERC20 public constant sushi = IERC20(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2);\\n\\n  uint256 public immutable pid;\\n\\n  address public immutable minichef;\\n\\n  event Harvest(uint256 indexed pid);\\n  event Withdraw(uint256 indexed pid, uint256 indexed amount);\\n  event Deposit(uint256 indexed pid, uint256 indexed amount);\\n\\n  constructor(uint256 _pid, address _minichef) {\\n    pid = _pid;\\n    minichef = _minichef;\\n  }\\n\\n  function harvestAndBridge() public {\\n    masterchefV1.withdraw(pid, 0);\\n    bridge();\\n    emit Harvest(pid);\\n  }\\n\\n  function withdraw() public onlyOwner {\\n    masterchefV1.withdraw(pid, 1);\\n    emit Withdraw(pid, 1);\\n  }\\n\\n  function deposit(address token) public onlyOwner {\\n    IERC20(token).approve(address(masterchefV1), 1);\\n    masterchefV1.deposit(pid, 1);\\n    emit Deposit(pid, 1);\\n  }\\n\\n  function bridge() public virtual;\\n}\",\"keccak256\":\"0xae155f8dcbc0d3b5391e1454ef54caeaade8808b2f28af60517b3332f17f57be\",\"license\":\"MIT\"},\"contracts/implementations/PolygonServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../BaseServer.sol';\\n\\ninterface IPolygonBridge {\\n  function depositFor(address user, address token, bytes calldata depositData) external;\\n}\\n\\ncontract PolygonServer is BaseServer {\\n  address public constant bridgeAddr = 0xA0c68C638235ee32657e8f720a23ceC1bFc77C77;\\n  address public constant polygonErcBridge = 0x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf;\\n\\n  event BridgedSushi(address indexed minichef, uint256 indexed amount);\\n\\n  constructor(uint256 _pid, address _minichef) BaseServer(_pid, _minichef) {}\\n\\n  function bridge() public override {\\n    uint256 sushiBalance = sushi.balanceOf(address(this));\\n\\n    sushi.approve(address(polygonErcBridge), sushiBalance);\\n    IPolygonBridge(bridgeAddr).depositFor(minichef, address(sushi), toBytes(sushiBalance));\\n    \\n    emit BridgedSushi(minichef, sushiBalance);\\n  }\\n\\n  function toBytes(uint256 x) internal pure returns (bytes memory b) {\\n    b = new bytes(32);\\n    assembly { mstore(add(b, 32), x) }\\n}\\n}\",\"keccak256\":\"0x2ad77bdcf57572f2c6f8b6167669101220e44a566daf74f9af3b9abfae03d5cc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610b93380380610b9383398101604081905261002f916100a8565b818161003a33610058565b60809190915260601b6001600160601b03191660a052506100e39050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080604083850312156100ba578182fd5b825160208401519092506001600160a01b03811681146100d8578182fd5b809150509250929050565b60805160a05160601c610a506101436000396000818161013e0152818161057a01526106150152600081816101bc01528181610254015281816102d701528181610365015281816103ee015281816107c9015261084c0152610a506000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806391874ef71161008c578063e78cea9211610066578063e78cea92146101af578063f1068454146101b7578063f2fde38b146101ec578063f340fa01146101ff57600080fd5b806391874ef714610171578063ca5a79ea1461018c578063d24a89d5146101a757600080fd5b80630a087903146100d457806331d8be331461010c5780633ccfd60b14610127578063715018a61461013157806387fcfb97146101395780638da5cb5b14610160575b600080fd5b6100ef736b3595068778dd592e39a122f4f5a5cf09c90fe281565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ef7340ec5b33f54e0e8a33a975908c5ba1c14e5bbbdf81565b61012f610212565b005b61012f610320565b6100ef7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03166100ef565b6100ef73a0c68c638235ee32657e8f720a23cec1bfc77c7781565b6100ef73c2edad668740f1aa35e4d8f227fb8e17dca888cd81565b61012f610356565b61012f610436565b6101de7f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610103565b61012f6101fa366004610910565b610660565b61012f61020d366004610910565b6106fb565b6000546001600160a01b031633146102455760405162461bcd60e51b815260040161023c906109e5565b60405180910390fd5b604051630441a3e760e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001602482015273c2edad668740f1aa35e4d8f227fb8e17dca888cd9063441a3e7090604401600060405180830381600087803b1580156102b857600080fd5b505af11580156102cc573d6000803e3d6000fd5b5050604051600192507f000000000000000000000000000000000000000000000000000000000000000091507f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c890600090a3565b6000546001600160a01b0316331461034a5760405162461bcd60e51b815260040161023c906109e5565b6103546000610896565b565b604051630441a3e760e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000602482015273c2edad668740f1aa35e4d8f227fb8e17dca888cd9063441a3e7090604401600060405180830381600087803b1580156103c957600080fd5b505af11580156103dd573d6000803e3d6000fd5b505050506103e9610436565b6040517f0000000000000000000000000000000000000000000000000000000000000000907f80f97f878e16410266694f134ddf012f2be424f54f8b5cafa107eccc51d00d5890600090a2565b6040516370a0823160e01b8152306004820152600090736b3595068778dd592e39a122f4f5a5cf09c90fe2906370a082319060240160206040518083038186803b15801561048357600080fd5b505afa158015610497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bb919061095e565b60405163095ea7b360e01b81527340ec5b33f54e0e8a33a975908c5ba1c14e5bbbdf600482015260248101829052909150736b3595068778dd592e39a122f4f5a5cf09c90fe29063095ea7b390604401602060405180830381600087803b15801561052557600080fd5b505af1158015610539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055d919061093e565b5073a0c68c638235ee32657e8f720a23cec1bfc77c7763e3dec8fb7f0000000000000000000000000000000000000000000000000000000000000000736b3595068778dd592e39a122f4f5a5cf09c90fe26105b7856108e6565b6040518463ffffffff1660e01b81526004016105d593929190610976565b600060405180830381600087803b1580156105ef57600080fd5b505af1158015610603573d6000803e3d6000fd5b50506040518392506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691507f9d48f6ecbf6b1efdebdb866a0442bae03dfdfc3ee5d20cc9f641799ce66c83a290600090a350565b6000546001600160a01b0316331461068a5760405162461bcd60e51b815260040161023c906109e5565b6001600160a01b0381166106ef5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023c565b6106f881610896565b50565b6000546001600160a01b031633146107255760405162461bcd60e51b815260040161023c906109e5565b60405163095ea7b360e01b815273c2edad668740f1aa35e4d8f227fb8e17dca888cd6004820152600160248201526001600160a01b0382169063095ea7b390604401602060405180830381600087803b15801561078157600080fd5b505af1158015610795573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b9919061093e565b50604051631c57762b60e31b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001602482015273c2edad668740f1aa35e4d8f227fb8e17dca888cd9063e2bbb15890604401600060405180830381600087803b15801561082d57600080fd5b505af1158015610841573d6000803e3d6000fd5b5050604051600192507f000000000000000000000000000000000000000000000000000000000000000091507fa3af609bf46297028ce551832669030f9effef2b02606d02cbbcc40fe6b47c5590600090a350565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b600060208284031215610921578081fd5b81356001600160a01b0381168114610937578182fd5b9392505050565b60006020828403121561094f578081fd5b81518015158114610937578182fd5b60006020828403121561096f578081fd5b5051919050565b600060018060a01b0380861683526020818616818501526060604085015284519150816060850152825b828110156109bc578581018201518582016080015281016109a0565b828111156109cd5783608084870101525b5050601f01601f191691909101608001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea264697066735822122041bb423b9aad93de3250dcfca5cb58133bde734fa4ab3c9598d93dd0d218084064736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806391874ef71161008c578063e78cea9211610066578063e78cea92146101af578063f1068454146101b7578063f2fde38b146101ec578063f340fa01146101ff57600080fd5b806391874ef714610171578063ca5a79ea1461018c578063d24a89d5146101a757600080fd5b80630a087903146100d457806331d8be331461010c5780633ccfd60b14610127578063715018a61461013157806387fcfb97146101395780638da5cb5b14610160575b600080fd5b6100ef736b3595068778dd592e39a122f4f5a5cf09c90fe281565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ef7340ec5b33f54e0e8a33a975908c5ba1c14e5bbbdf81565b61012f610212565b005b61012f610320565b6100ef7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03166100ef565b6100ef73a0c68c638235ee32657e8f720a23cec1bfc77c7781565b6100ef73c2edad668740f1aa35e4d8f227fb8e17dca888cd81565b61012f610356565b61012f610436565b6101de7f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610103565b61012f6101fa366004610910565b610660565b61012f61020d366004610910565b6106fb565b6000546001600160a01b031633146102455760405162461bcd60e51b815260040161023c906109e5565b60405180910390fd5b604051630441a3e760e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001602482015273c2edad668740f1aa35e4d8f227fb8e17dca888cd9063441a3e7090604401600060405180830381600087803b1580156102b857600080fd5b505af11580156102cc573d6000803e3d6000fd5b5050604051600192507f000000000000000000000000000000000000000000000000000000000000000091507f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c890600090a3565b6000546001600160a01b0316331461034a5760405162461bcd60e51b815260040161023c906109e5565b6103546000610896565b565b604051630441a3e760e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000602482015273c2edad668740f1aa35e4d8f227fb8e17dca888cd9063441a3e7090604401600060405180830381600087803b1580156103c957600080fd5b505af11580156103dd573d6000803e3d6000fd5b505050506103e9610436565b6040517f0000000000000000000000000000000000000000000000000000000000000000907f80f97f878e16410266694f134ddf012f2be424f54f8b5cafa107eccc51d00d5890600090a2565b6040516370a0823160e01b8152306004820152600090736b3595068778dd592e39a122f4f5a5cf09c90fe2906370a082319060240160206040518083038186803b15801561048357600080fd5b505afa158015610497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bb919061095e565b60405163095ea7b360e01b81527340ec5b33f54e0e8a33a975908c5ba1c14e5bbbdf600482015260248101829052909150736b3595068778dd592e39a122f4f5a5cf09c90fe29063095ea7b390604401602060405180830381600087803b15801561052557600080fd5b505af1158015610539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055d919061093e565b5073a0c68c638235ee32657e8f720a23cec1bfc77c7763e3dec8fb7f0000000000000000000000000000000000000000000000000000000000000000736b3595068778dd592e39a122f4f5a5cf09c90fe26105b7856108e6565b6040518463ffffffff1660e01b81526004016105d593929190610976565b600060405180830381600087803b1580156105ef57600080fd5b505af1158015610603573d6000803e3d6000fd5b50506040518392506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691507f9d48f6ecbf6b1efdebdb866a0442bae03dfdfc3ee5d20cc9f641799ce66c83a290600090a350565b6000546001600160a01b0316331461068a5760405162461bcd60e51b815260040161023c906109e5565b6001600160a01b0381166106ef5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023c565b6106f881610896565b50565b6000546001600160a01b031633146107255760405162461bcd60e51b815260040161023c906109e5565b60405163095ea7b360e01b815273c2edad668740f1aa35e4d8f227fb8e17dca888cd6004820152600160248201526001600160a01b0382169063095ea7b390604401602060405180830381600087803b15801561078157600080fd5b505af1158015610795573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b9919061093e565b50604051631c57762b60e31b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001602482015273c2edad668740f1aa35e4d8f227fb8e17dca888cd9063e2bbb15890604401600060405180830381600087803b15801561082d57600080fd5b505af1158015610841573d6000803e3d6000fd5b5050604051600192507f000000000000000000000000000000000000000000000000000000000000000091507fa3af609bf46297028ce551832669030f9effef2b02606d02cbbcc40fe6b47c5590600090a350565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b600060208284031215610921578081fd5b81356001600160a01b0381168114610937578182fd5b9392505050565b60006020828403121561094f578081fd5b81518015158114610937578182fd5b60006020828403121561096f578081fd5b5051919050565b600060018060a01b0380861683526020818616818501526060604085015284519150816060850152825b828110156109bc578581018201518582016080015281016109a0565b828111156109cd5783608084870101525b5050601f01601f191691909101608001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea264697066735822122041bb423b9aad93de3250dcfca5cb58133bde734fa4ab3c9598d93dd0d218084064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/implementations/PolygonServer.sol:PolygonServer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}